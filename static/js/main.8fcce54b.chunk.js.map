{"version":3,"sources":["components/Button.tsx","constants/constants.ts","utils/MathUtils.ts","components/ModeToggle.tsx","App.tsx","index.tsx"],"names":["Button","label","className","id","props","value","memo","operators","allButtons","getExpressionArrayFromString","text","exprArray","currentStr","i","length","ch","charAt","prevChar","includes","push","evaluatePartialExpression","num1","num2","op","getResult","reduce","prev","curr","sum","ModeToggle","onChange","htmlFor","type","name","checked","App","useState","expression","setExpression","mode","setMode","isInitialDisplayText","updateDisplayText","dt","addDecimal","expr","lastItem","canAddDecimal","matchValue","slice","result","console","log","currentOpIndex","res","currentOperator","ind","indexOf","splice","evaluateFormula","evaluateImmediate","isLastOp","isSecondLastOp","substr","handleOperator","map","btn","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fcce54b.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, memo, PropsWithChildren } from 'react';\n\nconst Button = ({\n  label,\n  className,\n  id,\n  value,\n  ...props\n}: PropsWithChildren<ButtonHTMLAttributes<HTMLButtonElement>> & { label: string | number }) => (\n  <button className={`calc-button${className ? ` ${className}` : ''} ${id}`} id={id} value={label} {...props}>\n    {label}\n  </button>\n);\n\nexport default memo(Button);\n","export const operators = ['/', 'x', '+', '-'];\n\nexport const allButtons = [\n  { label: 'AC', id: 'clear', className: 'delete' },\n  { label: '/', id: 'divide', className: 'operator' },\n  { label: 'x', id: 'multiply', className: 'operator' },\n  { label: 7, id: 'seven' },\n  { label: 8, id: 'eight' },\n  { label: 9, id: 'nine' },\n  { label: '-', id: 'subtract', className: 'operator' },\n  { label: 4, id: 'four' },\n  { label: 5, id: 'five' },\n  { label: 6, id: 'six' },\n  { label: '+', id: 'add', className: 'operator' },\n  { label: 1, id: 'one' },\n  { label: 2, id: 'two' },\n  { label: 3, id: 'three' },\n  { label: '=', id: 'equals' },\n  { label: 'C', id: 'delete', className: 'delete' },\n  { label: 0, id: 'zero' },\n  { label: '.', id: 'decimal' },\n];\n","import { operators } from '../constants/constants';\n\nexport const getExpressionArrayFromString = (text: string) => {\n  const exprArray = [];\n  let currentStr = '';\n  for (let i = 0; i < text.length; i++) {\n    const ch = text.charAt(i);\n    const prevChar = text.charAt(i - 1);\n    if (operators.includes(ch) && !(i > 0 && operators.includes(prevChar))) {\n      exprArray.push(currentStr);\n      exprArray.push(ch);\n      currentStr = '';\n    } else {\n      currentStr += ch;\n    }\n  }\n  exprArray.push(currentStr);\n  return exprArray;\n};\n\nexport const evaluatePartialExpression = (num1: number, num2: number, op: string) => {\n  switch (op) {\n    case '+':\n      return num1 + num2;\n    case '-':\n      return num2 - num1;\n    case 'x':\n      return num1 * num2;\n    case '/':\n      return num2 / num1;\n    default:\n      return num2;\n  }\n};\n\nconst getResult = (exprArray: string[]) => {\n  let op: string | null;\n  return exprArray.reduce((prev: number, curr: string) => {\n    if (operators.includes(curr)) {\n      op = curr;\n      return prev;\n    }\n    if (op) {\n      const num = +curr;\n      let sum = evaluatePartialExpression(num, prev, op);\n      op = null;\n      return sum;\n    }\n    return +curr + prev;\n  }, 0);\n};\n\nexport const evaluateImmediate = (expression: string) => {\n  console.log('evaluating immediate');\n  const exprArray = getExpressionArrayFromString(expression);\n  if (exprArray.length <= 1) {\n    return;\n  }\n  return getResult(exprArray);\n};\n\nexport const evaluateFormula = (expression: string) => {\n  console.log('evaluating formula');\n  const exprArray = getExpressionArrayFromString(expression);\n  if (exprArray.length <= 1) {\n    return;\n  }\n  let currentOpIndex = 0;\n  let res = 0;\n\n  while (currentOpIndex < 2) {\n    const currentOperator = operators[currentOpIndex];\n    const ind = exprArray.indexOf(currentOperator);\n    if (ind < 0) {\n      currentOpIndex++;\n      continue;\n    }\n    res = evaluatePartialExpression(+exprArray[ind + 1], +exprArray[ind - 1], currentOperator);\n    exprArray.splice(ind - 1, 3, `${res}`);\n  }\n  if (exprArray.length === 1) {\n    return exprArray[0];\n  }\n  res = getResult(exprArray);\n  return res;\n};\n\nexport const canAddDecimal = (expr: string) => {\n  if (expr === '0') {\n    return true;\n  }\n  const exprArray = getExpressionArrayFromString(expr);\n  if (exprArray.length === 1 && expr.includes('.')) {\n    return false;\n  }\n  const lastItem = exprArray[exprArray.length - 1];\n\n  if (!lastItem.includes('.')) {\n    return true;\n  }\n  return operators.includes(lastItem);\n};\n","import React from 'react';\n\nconst ModeToggle = ({ value, onChange }: { value: string; onChange: (...args: any[]) => any }) => (\n  <div className=\"calc-mode\">\n    <label className=\"calc-mode-label\" htmlFor=\"formula\">\n      <input type=\"radio\" name=\"mode\" id=\"formula\" onChange={onChange} value=\"formula\" checked={value === 'formula'} />\n      Formula\n    </label>\n    <label className=\"calc-mode-label\" htmlFor=\"immediate\">\n      <input\n        type=\"radio\"\n        name=\"mode\"\n        id=\"immediate\"\n        onChange={onChange}\n        value=\"immediate\"\n        checked={value === 'immediate'}\n      />\n      Immediate\n    </label>\n  </div>\n);\n\nexport default ModeToggle;\n","import Button from './components/Button';\nimport { useState } from 'react';\nimport { canAddDecimal, evaluateFormula, evaluateImmediate } from './utils/MathUtils';\nimport { allButtons, operators } from './constants/constants';\nimport ModeToggle from './components/ModeToggle';\n\nconst App = () => {\n  const [expression, setExpression] = useState('0');\n  const [mode, setMode] = useState('formula');\n\n  const clearDisplay = () => {\n    setExpression('0');\n  };\n\n  const isInitialDisplayText = () => {\n    return expression === '0';\n  };\n\n  const deleteLastChar = () => {\n    if (expression.length > 1) {\n      setExpression(expression.slice(0, expression.length - 1));\n    } else {\n      setExpression('0');\n    }\n  };\n\n  const toggleMode = () => {\n    setMode(mode === 'immediate' ? 'formula' : 'immediate');\n  };\n\n  const handleOperator = (op: string) => {\n    const isLastOp = operators.includes(expression.charAt(expression.length - 1));\n    const isSecondLastOp = operators.includes(expression.charAt(expression.length - 2));\n    if (isInitialDisplayText() && op !== '-') {\n      return;\n    }\n    if (!expression.length || isInitialDisplayText() || isLastOp) {\n      if (op !== '-') {\n        return setExpression(dt => dt.substr(0, dt.length - (isSecondLastOp ? 2 : 1)) + op);\n      } else if (op === '-' && isSecondLastOp) {\n        return;\n      }\n    }\n\n    updateDisplayText(op);\n  };\n\n  const updateDisplayText = (value: string | number) => {\n    if (isInitialDisplayText()) {\n      return setExpression(`${value}`);\n    } else {\n      return setExpression(dt => dt + value);\n    }\n  };\n\n  const addDecimal = () => {\n    if (canAddDecimal(expression)) {\n      return setExpression(dt => {\n        if (operators.includes(dt.charAt(dt.length - 1))) {\n          return dt + '0.';\n        }\n        return dt + '.';\n      });\n    }\n  };\n\n  const matchValue = (value: string | number) => {\n    switch (value) {\n      case 'AC':\n        return clearDisplay();\n      case 'C':\n        return deleteLastChar();\n      case 0:\n        if (isInitialDisplayText()) {\n          return;\n        } else {\n          return setExpression(dt => dt + '0');\n        }\n      case '.':\n        return addDecimal();\n      case '=':\n        const result = mode === 'formula' ? evaluateFormula(expression) : evaluateImmediate(expression);\n        return setExpression(`${result}`);\n      case '+':\n      case '-':\n      case '/':\n      case 'x':\n        return handleOperator(value);\n      default:\n        updateDisplayText(value);\n    }\n  };\n\n  return (\n    <>\n      <ModeToggle value={mode} onChange={toggleMode} />\n      <main className=\"calc\">\n        <div className=\"calc-display\" id=\"display\">\n          {expression}\n        </div>\n        <div className=\"calc-buttons\">\n          {allButtons.map(btn => (\n            <Button\n              label={btn.label}\n              key={btn.id}\n              id={btn.id}\n              className={btn.className}\n              onClick={() => matchValue(btn.label)}\n            />\n          ))}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}